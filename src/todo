a=[]  automatically set mom of this object to parent:
	a=[`mom=this]?
	We can't really do this.. a.print will turn up in non-objects.
        On the other hand we would like it for making objects.

add something like this: z.a.call(b,...) so we can call with different mom.
   (a is called with mom set to b instead of z)


mixing named and numbered args is weird:
  we assign left to right.  NUmber starts at first arg.

forindex doesn't handle changes to the object while it's running.  Make a
 snapshot of the object indexes before running?

can we use atoms (tNAMs) instead of strings for forindex for speed?

check that objects get deleted..  I'm confused about rmvlvl.. we set ivy->vars
to get_mom(ivy->vars).. but why no refcount transfer here.

print source code line number when we crash, not just stack trace.

make switch native for speed?

add tests for "continue"

We track references to variables, for example if a closure goes away but a
variable within it is still being referenced, we keep the variable..  but in
current implementation:

  Refernece leak:
    get var
    get var
    add     reduces stack by one but doesn't reference var

  I think overhead for this is high.

  We track references in this case:
     a=5    We get value of a on left side, but as side effect take a reference on the variable a.


Lack of keyword problems:

define and call is weird:

	y=fn((),{ body })()
	y={ fn () { body } }()

	it would be nice if we had:
		y=fn(){ body }()
	or
		z=fn(){ body }

  # Doesn't work because while is not a keyword..
       x=0 while x!=10 {
         x=x+1
       }

  # have to do this:
       x = 0; while ...
    or
       x = 0; while(x!=10,...)

  loop break          does not work (treat break as a keyword here?)
  loop break()        this does work


loop [break]        does work
fred: loop [break]  does not work


form 1:	with a b c			ok
form 2: with (a, b, c) print(x)		ok

form 3: with a b c [print x]
form 4: with a b c
           print x

form 5: with a b c print(x)		not possible




We could do this:
     with (a, b, c) print(x)
  but then it means we have to do this:
     [with (a,b,c); print x]

Analogy:
     var (a, b, c) x=7
     [var (a, b, c); x=7 ]

how to have a chain of lambda callbacks without brackets?

read_file "fred" fn((er, data),[
	write_file "bar" fn((er),[
		if er
	])
])


Simplifications:
  Dump 'dynamic'.. it's intersting, but do we ever need it?


Fixed:
  valid command typed after one with error would not work
  'break fred' was crashing inside a loop with no name

  fn((),fn((),print("inner")))()() was not working because scope was being deleted
  even though there was still a reference to it.

  we now allow:
     var (x,y) print(x+y)
     var x y [print x+y]

  'this' is now working (we had made 'this' a variable in an object: now
  it's a magic value- magic value is better: can not write to it, does not
  create circular reference).

  Added `name loop labels

  break and return deep in expressions now works

  why does this crash?: print /2
  [fixed]

  we now allow strings to cross lines

  we allow \ as last character in a string to ignore the line crossing

  we do not try to get more input if the line ends with an infix operator:
     print 1+
     2
  [fixed]

this crashes:
    fn set(&a &b) {
       *a = *b
    }
[fixed]

Dump 'with'.. it's interesting, but do we ever need it?
[dumped]

Instead of obj->next, we now use obj.mom (variable mom in obj).  So there is
now only a single link to the parent.  Also now, the parent can be changed
with an assignment.  Parent can be set on regular objects, not just scoping
levels.

line ending with ; mess up
[fixed]

Need a way to have & implied on variable arguments.
  If & is on last argument, then any extra have it?
[done- now we can implement switch]

a.b()  : run b with mom set to a?  (javascript a.b.call(a))
[done]

foreach/forindex only work on arrays- it should also work on objects
[fixed- now it works on objects]

add forin (gets index instead of value as in foreach)
[done: we added forindex]
- - - -
